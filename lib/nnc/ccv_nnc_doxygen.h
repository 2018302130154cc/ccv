/**********************************************************
 * C-based/Cached/Core Computer Vision Library
 * Liu Liu, 2010-02-01
 **********************************************************/

/**********************************************************
 * CCV - Neural Network Collection
 **********************************************************/

/* This file documented all functions that doesn't exist but should be generated by Doxygen. */

#ifndef GUARD_ccv_nnc_doxygen_h
#define GUARD_ccv_nnc_doxygen_h

/**
 * @ingroup level_4
 * Create a new tensor variable without specified dimensions. Most likely this will be
 * used as output, therefore, its shape can be derived.
 * @param graph The dynamic graph.
 * @return A newly created tensor variable reference.
 */
CCV_WARN_UNUSED(ccv_nnc_tensor_variable_t) ccv_nnc_tensor_variable_new(ccv_nnc_dynamic_graph_t* const graph);
/**
 * @ingroup level_4
 * Create a new tensor variable with tensor parameters.
 * @param graph The dynamic graph.
 * @param info Tensor parameters.
 * @return A newly created tensor variable reference.
 */
CCV_WARN_UNUSED(ccv_nnc_tensor_variable_t) ccv_nnc_tensor_variable_new(ccv_nnc_dynamic_graph_t* const graph, const ccv_nnc_tensor_param_t info);
/**
 * @ingroup level_4
 * Create a new tensor constant without specified dimensions. This may be used with
 * ccv_nnc_tensor_variable_set. A constant cannot be an output with some inputs. It
 * can be a output with no input (such as CCV_NNC_SET_FORWARD command). This is used
 * so that we don't need to keep memory of this constant because later we want to
 * compute gradient of this constant. It is not legal to run ccv_nnc_dynamic_backward
 * against a constant.
 * @param graph The dynamic graph.
 * @return A newly created tensor constant reference.
 */
CCV_WARN_UNUSED(ccv_nnc_tensor_variable_t) ccv_nnc_tensor_constant_new(ccv_nnc_dynamic_graph_t* const graph);
/**
 * @ingroup level_4
 * Create a new tensor constant with tensor parameters.
 * @param graph The dynamic graph.
 * @param info Tensor parameters.
 * @return A newly created tensor constant reference.
 */
CCV_WARN_UNUSED(ccv_nnc_tensor_variable_t) ccv_nnc_tensor_constant_new(ccv_nnc_dynamic_graph_t* const graph, const ccv_nnc_tensor_param_t info);
/**
 * Get the underlying tensor for the tensor variable. The tensor allocation may be performed when calling this
 * method. If the tensor cannot be allocated (because no shape specified), return 0.
 * @param graph The dynamic graph.
 * @param tensor_variable The tensor variable to get the underlying tensor.
 * @return The underlying tensor.
 */
CCV_WARN_UNUSED(ccv_nnc_tensor_t*) ccv_nnc_tensor_from_variable(ccv_nnc_dynamic_graph_t* const graph, const ccv_nnc_tensor_variable_t tensor_variable);
/**
 * Get the underlying tensor for the tensor variable. The tensor allocation may be performed when calling this
 * method. If the tensor cannot be allocated (because no shape specified), return 0.
 * @param graph The dynamic graph.
 * @param tensor_variable The tensor variable to get the underlying tensor.
 * @param stream_context Which stream this command will be executed upon.
 * @return The underlying tensor.
 */
CCV_WARN_UNUSED(ccv_nnc_tensor_t*) ccv_nnc_tensor_from_variable(ccv_nnc_dynamic_graph_t* const graph, const ccv_nnc_tensor_variable_t tensor_variable, ccv_nnc_stream_context_t* const stream_context);

#endif
